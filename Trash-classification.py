
# coding: utf-8

# # Building a Smart system based on Deep Convolutional Neural Networks to classify Trash

# In[1]:


from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten
from keras.applications import VGG16
from keras import models
from keras.optimizers import Adagrad
from keras.preprocessing.image import ImageDataGenerator
from keras.callbacks import EarlyStopping
import numpy as np
from glob import glob
import os
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
# for reproducibility
np.random.seed(78)


# In[ ]:


# Input image dimensions
img_rows, img_cols, img_chans = 384, 512, 3
input_shape = (img_rows, img_cols, img_chans)
batch_size = 8
num_classes = 2
epochs = 2000
data_augmentation = True


# In[2]:


def train(x_train, x_test, y_train, y_test):
    
    #Loading the VGG model
    vgg_conv = VGG16(weights='imagenet', include_top=False,  input_shape=input_shape)
    
    for i in range(8):
        #removing the last layers  
        vgg_conv.layers.pop() 
    
    
    # Freezing all layers
    for layer in vgg_conv.layers[:]:
        layer.trainable = False
     
    # Building Deep learning model
    model = models.Sequential()
     
    # Adding the vgg model
    model.add(vgg_conv)
     
    # Adding new layers
    model.add(Flatten())
    model.add(Dense(350, activation='relu', input_shape=input_shape))
    model.add(Dropout(0.2))
    model.add(Dense(350, activation='relu'))
    model.add(Dropout(0.2))
    model.add(Dense(2, activation='sigmoid'))
     
    model.compile(loss='binary_crossentropy', optimizer=Adagrad(lr=1e-5, decay=1e-6), metrics=['accuracy'])
    
    """
    files = glob('Model2**')
    print(files)
    list_models=[]
    for  model_ in files:
        list_models.append(float(model_[:-5].split('=')[1]))
        
    index = np.argmin(list_models)
    load_model = files[index]
    print(load_model)

    if load_model is not None:
            model.load_weights(load_model)
            print("weights are loaded")
    else:
            print("weights are None")
    """       
    
    call =  [                  
                                    EarlyStopping(monitor='val_loss',  patience=20, verbose=1,  mode='auto'),
            ]
    
    if not data_augmentation:
        print('Not using data augmentation.')
        model.fit(x_train, y_train,
                  batch_size=batch_size,
                  epochs=epochs,
                  validation_data=(x_test, y_test),
                  shuffle=True)
    else:
        print('Using real-time data augmentation.')
        # This will do preprocessing and realtime data augmentation:
        datagen = ImageDataGenerator(
        featurewise_center=False,  # set input mean to 0 over the dataset   
        samplewise_center=False,  # set each sample mean to 0   
        featurewise_std_normalization=False,  # divide inputs by std of the dataset   
        samplewise_std_normalization=False,  # divide each input by its std  
        zca_whitening=False,  # apply ZCA whitening     
        zca_epsilon=1e-06,  # epsilon for ZCA whitening
        rotation_range=30,  # randomly rotate images in the range (degrees, 0 to 180)  <<1    0 => 30
        # randomly shift images horizontally (fraction of total width)
        width_shift_range=0.1,
        # randomly shift images vertically (fraction of total height)
        height_shift_range=0.1,
        shear_range=0.2,  # set range for random shear  <<3<<4  0 => 0.1 => 0.2
        zoom_range=0.3,  # set range for random zoom    <<1<<2<<3   0 => 0.1 => 0.2 =>0.3 
        channel_shift_range=0.2,  # set range for random channel shifts     <<5<<6   0.=>0.1=>0.2
        # set mode for filling points outside the input boundaries
        fill_mode='nearest',
        cval=0.,  # value used for fill_mode = "constant"     
        horizontal_flip=True,  # randomly flip images
        vertical_flip=True,  # randomly flip images    <<1    false => True
        # set rescaling factor (applied before any other transformation)
        rescale=None,   
        # set function that will be applied on each input
        preprocessing_function=None,
        # image data format, either "channels_first" or "channels_last"
        data_format=None,
        # fraction of images reserved for validation (strictly between 0 and 1)
        validation_split=0.0)
    
        print("steps_per_epoch (nbr of samples per epoch):", int(len(x_train)/batch_size))
        # Fit the model on the batches generated by datagen.flow().
        history = model.fit_generator(datagen.flow(x_train, y_train,
                                         batch_size=batch_size),steps_per_epoch = 800,
                            epochs=2000,
                            validation_data=(x_test, y_test),
                            workers=10, callbacks = call)
        
        weights = '{}.hdf5'.format('Model3_adagrad_'+'val_acc:'+str(round(history.history['val_acc'][-1],3))+' val_loss='+str(round(history.history['val_loss'][-1],3)))
        model.save_weights(weights)
        print ('Model saved.')
        
        score = model.evaluate(x_test, y_test,batch_size=10, verbose=0)
        print('Test loss:', score[0])
        print('Test accuracy:', score[1])

        acc = history.history['acc']
        val_acc = history.history['val_acc']
        loss = history.history['loss']
        val_loss = history.history['val_loss']

        epoch = range(len(acc))

        plt.plot(epoch, acc, 'b', label='Training acc')
        plt.plot(epoch, val_acc, 'r', label='Validation acc')
        plt.title('Training and validation accuracy')
        plt.legend()
        plt.figure()

        plt.plot(epoch, loss, 'b', label='Training loss')
        plt.plot(epoch, val_loss, 'r', label='Validation loss')
        plt.title('Training and validation loss')
        plt.legend()
        plt.show()


# In[ ]:


def test(x_test):
    
    image = np.expand_dims((x_test[58] - np.mean(x_test))/ np.std(x_test), axis=0)

    plt.imshow(x_test[58])
    plt.show()

    out = model.predict(x_test[58])
    out = np.argmax(out)

    if out == 1:
            label = 'plastic'
    else:
            label = 'glass'

    return out, label


# In[3]:


train()


# In[ ]:


if __name__ == "__main__":   
    
    # Load all images
    all_images_array = np.load('all_images_array.npy')

    # load the the class labels
    all_labels = np.load('all_labels.npy')

    # Split the dataset into train and test sets, with percentage of splitting = 70 / 30 respectively
    x_train, x_test, y_train, y_test = train_test_split(all_images_array, all_labels, test_size=0.30, shuffle=True, random_state=78)

    # Data normalization to convert features to the same scale
    x_train = x_train.astype('float32')
    x_test = x_test.astype('float32')
    #x_train /= 255
    #x_test /= 255

    x_train = (x_train - np.mean(x_train)) / np.std(x_train)
    x_test  = (x_test - np.mean(x_test)) / np.std(x_test)

    print('x_train shape:', x_train.shape)
    print(x_train.shape[0], 'train samples')
    print(x_test.shape[0], 'test samples')
    
    # convert class vectors to One-hot encoding
    y_train = keras.utils.to_categorical(y_train, num_classes)
    y_test = keras.utils.to_categorical(y_test, num_classes)

    train(x_train, x_test, y_train, y_test)
    
    prediction, label = test(x_test)
    
    print('The prediction of this object is:', prediction, '=> ', label)


# In[ ]:


#Workers = 8
#step_per_epoch 100:
#Test loss: 0.34983771067049546
#Test accuracy: 0.8220338942640919

#step_per_epoch 200: epoch=>72
#Test loss: 0.28055439813662386
#Test accuracy: 0.8932203276682709

#step_per_epoch 400: epoch=>12 continous
#Test loss: 0.2784507023328442
#Test accuracy: 0.8949152453471039

#step_per_epoch 800: epoch=>9 continous
#Test loss: 0.2843580770669347
#Test accuracy: 0.9050847372766269

#==========================================
#Workers = 32
#step_per_epoch 100:  epoch=>10 continous
#Test loss: 0.2690500178200714
#Test accuracy: 0.9033898216182903

#step_per_epoch 200:  epoch=>18 continous
#Test loss: 0.2979729557252031
#Test accuracy: 0.9050847372766269

#step_per_epoch 400: epoch=>10 continous
#Test loss: 0.2838988147234007
#Test accuracy: 0.9067796549554599

#step_per_epoch 400: epoch=>6 continous
#Test loss: 0.2930123057468968
#Test accuracy: 0.9101694842516366

#having nbr of worker=32 and step_per_epoch=800 makes the memory overwhelms

